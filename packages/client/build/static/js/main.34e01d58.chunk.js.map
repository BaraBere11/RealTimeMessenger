{"version":3,"sources":["components/AccountContext.jsx","components/ToggleColorMode.jsx","socket.js","components/Home/ChatBox.jsx","components/Home/Chat.jsx","components/TextField.jsx","components/Home/AddFriendModal.jsx","components/Home/Sidebar.jsx","components/Home/useSocketSetup.jsx","components/Home/Home.jsx","components/Login/Login.jsx","components/Login/SignUp.jsx","components/PrivateRoutes.jsx","components/Views.jsx","App.js","theme.js","index.js","../../common/index.js"],"names":["createContext","useState","useEffect","require","AccountContext","UserContext","_ref","children","user","setUser","loggedIn","token","localStorage","getItem","navigate","useNavigate","fetch","concat","process","REACT_APP_SERVER_URL","credentials","headers","authorization","catch","err","then","r","ok","status","json","data","_jsx","Provider","value","ToggleColorMode","colorMode","toggleColorMode","useColorMode","Button","onClick","pos","top","right","m","SunIcon","color","MoonIcon","socket","io","autoConnect","withCredentials","auth","ChatBox","userid","setMessages","useContext","MessagesContext","SocketContext","Formik","initialValues","message","validationSchema","Yup","min","max","onSubmit","values","actions","to","from","content","emit","prevMsgs","resetForm","_jsxs","HStack","as","Form","w","pb","px","Input","Field","name","placeholder","size","autoComplete","type","colorScheme","Chat","friendList","FriendContext","messages","bottomDiv","useRef","_bottomDiv$current","current","scrollIntoView","length","VStack","h","justify","TabPanels","overflowY","map","friend","flexDir","TabPanel","ref","filter","msg","idx","Text","maxW","fontSize","bg","borderRadius","p","username","pt","textAlign","TextField","label","props","field","meta","useField","FormControl","isInvalid","touched","error","FormLabel","FormErrorMessage","AddFriendModal","isOpen","onClose","setError","closeModal","useCallback","setFriendList","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","friendName","_ref2","errorMsg","done","newFriend","c","friendSchema","ModalBody","Heading","ModalFooter","Sidebar","onOpen","useDisclosure","_Fragment","py","ChatIcon","Divider","TabList","Tab","Circle","connected","useSocketSetup","connect","on","prevFriends","off","Home","_friendList$friendInd","friendIndex","setFriendIndex","setSocket","socketConn","Grid","templateColumns","Tabs","onChange","index","GridItem","colSpan","borderRight","maxH","Login","password","formSchema","vals","method","body","JSON","stringify","res","setItem","base","md","spacing","ButtonGroup","SignUp","leftIcon","ArrowBackIcon","Outlet","Navigate","PrivateRoutes","useAuth","Views","Routes","Route","path","element","App","extendTheme","config","intialColorMode","useSystemColorMode","styles","global","margin","fontFamily","WebKitFontSmoothing","MozOsxFontSmoothing","code","ReactDOM","render","React","StrictMode","HashRouter","ChakraProvider","theme","ColorModeScript","initialColorMode","document","getElementById","object","string","required","module","exports"],"mappings":"0NAEA,MAAM,cAAEA,EAAa,SAAEC,EAAQ,UAAEC,GAAcC,EAAQ,GAE1CC,EAAiBJ,IA2CfK,MAzCKC,IAAmB,IAAlB,SAAEC,GAAUD,EAC/B,MAAOE,EAAMC,GAAWR,EAAS,CAC/BS,SAAU,KACVC,MAAOC,aAAaC,QAAQ,WAExBC,EAAWC,wBA6BjB,OA5BAb,GAAU,KACRc,MAAM,GAADC,OAAIC,mIAAYC,qBAAoB,eAAe,CACtDC,YAAa,UACbC,QAAS,CACPC,cAAc,UAADL,OAAYT,EAAKG,UAG/BY,OAAMC,IACLf,EAAQ,CAAEC,UAAU,GACd,IAEPe,MAAKC,IACJ,GAAKA,GAAMA,EAAEC,MAAMD,EAAEE,QAAU,KAI/B,OAAOF,EAAEG,OAHPpB,EAAQ,CAAEC,UAAU,GAGP,IAEhBe,MAAKK,IACCA,GAILrB,EAAQ,IAAKqB,IACbhB,EAAS,UAJPL,EAAQ,CAAEC,UAAU,GAIL,GACjB,GAEH,IAEDqB,cAAC3B,EAAe4B,SAAQ,CAACC,MAAO,CAAEzB,OAAMC,WAAUF,SAC/CA,GACuB,E,gBCpBf2B,MAnBSA,KACtB,MAAM,UAAEC,EAAS,gBAAEC,GAAoBC,cACvC,OACEN,cAACO,IAAM,CACLC,QAASA,IAAMH,IACfI,IAAI,WACJC,IAAI,IACJC,MAAM,IACNC,EAAE,OAAMpC,SAEO,SAAd4B,EACCJ,cAACa,IAAO,CAACC,MAAM,eAEfd,cAACe,IAAQ,CAACD,MAAM,cAEX,E,yBCREE,MATAvC,GACb,IAAIwC,IAAG9B,mIAAYC,qBAAsB,CACvC8B,aAAa,EACbC,iBAAiB,EACjBC,KAAM,CACJxC,MAAOH,EAAKG,S,wBCiCHyC,MAhCC9C,IAAiB,IAAhB,OAAE+C,GAAQ/C,EACzB,MAAM,YAAEgD,GAAgBC,qBAAWC,IAC7B,OAAET,GAAWQ,qBAAWE,GAC9B,OACE1B,cAAC2B,IAAM,CACLC,cAAe,CAAEC,QAAS,IAC1BC,iBAAkBC,SAAW,CAC3BF,QAASE,WAAaC,IAAI,GAAGC,IAAI,OAEnCC,SAAUA,CAACC,EAAQC,KACjB,MAAMP,EAAU,CAAEQ,GAAIf,EAAQgB,KAAM,KAAMC,QAASJ,EAAON,SAC1Db,EAAOwB,KAAK,KAAMX,GAClBN,GAAYkB,GAAY,CAACZ,KAAYY,KACrCL,EAAQM,WAAW,EACnBlE,SAEFmE,eAACC,IAAM,CAACC,GAAIC,IAAMC,EAAE,OAAOC,GAAG,SAASC,GAAG,SAAQzE,SAAA,CAChDwB,cAACkD,IAAK,CACJL,GAAIM,IACJC,KAAK,UACLC,YAAY,sBACZC,KAAK,KACLC,aAAa,QAEfvD,cAACO,IAAM,CAACiD,KAAK,SAASF,KAAK,KAAKG,YAAY,OAAMjF,SAAC,aAI9C,ECkCEkF,MAhEFnF,IAAiB,IAAhB,OAAE+C,GAAQ/C,EACtB,MAAM,WAAEoF,GAAenC,qBAAWoC,IAC5B,SAAEC,GAAarC,qBAAWC,GAC1BqC,EAAYC,iBAAO,MAMzB,OAJA5F,qBAAU,KAAO,IAAD6F,EACG,QAAjBA,EAAAF,EAAUG,eAAO,IAAAD,GAAjBA,EAAmBE,gBAAgB,IAG9BP,EAAWQ,OAAS,EACzBxB,eAACyB,IAAM,CAACC,EAAE,OAAOC,QAAQ,MAAK9F,SAAA,CAC5BwB,cAACuE,IAAS,CAACC,UAAU,SAAQhG,SAC1BmF,EAAWc,KAAIC,GACd/B,eAACyB,IAAM,CACLO,QAAQ,iBACR9B,GAAI+B,IAEJ7B,EAAE,OAAMvE,SAAA,CAERwB,cAAA,OAAK6E,IAAKf,IACTD,EACEiB,QACCC,GAAOA,EAAI1C,KAAOqC,EAAOpD,QAAUyD,EAAIzC,OAASoC,EAAOpD,SAExDmD,KAAI,CAAC5C,EAASmD,IACbhF,cAACiF,IAAI,CACHrE,EACEiB,EAAQQ,KAAOqC,EAAOpD,OAClB,2BACA,2BAEN4D,KAAK,MAELC,SAAS,KACTC,GAAIvD,EAAQQ,KAAOqC,EAAOpD,OAAS,WAAa,WAChDR,MAAM,WACNuE,aAAa,OACbC,EAAE,cAAa9G,SAEdqD,EAAQU,SAAO,OAAArD,OAPJwF,EAAOa,SAAQ,KAAArG,OAAI8F,QASjC,QAAA9F,OAzBSwF,EAAOa,eA6B1BvF,cAACqB,EAAO,CAACC,OAAQA,OAGnBtB,cAACoE,IAAM,CACLE,QAAQ,SACRkB,GAAG,OACHzC,EAAE,OACF0C,UAAU,SACVN,SAAS,KAAI3G,SAEbwB,cAACuE,IAAS,CAAA/F,SACRwB,cAAC4E,IAAQ,CAAApG,SACPwB,cAACiF,IAAI,CAAAzG,SAAC,yDAIb,E,gCChDYkH,MAXGnH,IAA0B,IAAzB,MAAEoH,KAAUC,GAAOrH,EACpC,MAAOsH,EAAOC,GAAQC,YAASH,GAC/B,OACEjD,eAACqD,IAAW,CAACC,UAAWH,EAAKI,SAAWJ,EAAKK,MAAM3H,SAAA,CACjDwB,cAACoG,IAAS,CAAA5H,SAAEmH,IACZ3F,cAACkD,IAAK,CAACL,GAAIM,OAAW0C,KAAWD,IACjC5F,cAACqG,IAAgB,CAAA7H,SAAEsH,EAAKK,UACZ,ECwDHG,MAxDQ/H,IAA0B,IAAzB,OAAEgI,EAAM,QAAEC,GAASjI,EACzC,MAAO4H,EAAOM,GAAYvI,mBAAS,IAC7BwI,EAAaC,uBAAY,KAC7BF,EAAS,IACTD,GAAS,GACR,CAACA,KACE,cAAEI,GAAkBpF,qBAAWoC,IAC/B,OAAE5C,GAAWQ,qBAAWE,GAC9B,OACEiB,eAACkE,IAAK,CAACN,OAAQA,EAAQC,QAASE,EAAWlI,SAAA,CACzCwB,cAAC8G,IAAY,IACbnE,eAACoE,IAAY,CAAAvI,SAAA,CACXwB,cAACgH,IAAW,CAAAxI,SAAC,kBACbwB,cAACiH,IAAgB,IACjBjH,cAAC2B,IAAM,CACLC,cAAe,CAAEsF,WAAY,IAC7BhF,SAAUC,IACRnB,EAAOwB,KACL,aACAL,EAAO+E,YACPC,IAAoC,IAAnC,SAAEC,EAAQ,KAAEC,EAAI,UAAEC,GAAWH,EAC5B,GAAIE,EAGF,OAFAT,GAAcW,GAAK,CAACD,KAAcC,UAClCb,IAGFD,EAASW,EAAS,GAErB,EAEHtF,iBAAkB0F,eAAahJ,SAE/BmE,eAACG,IAAI,CAAAtE,SAAA,CACHmE,eAAC8E,IAAS,CAAAjJ,SAAA,CACRwB,cAAC0H,IAAO,CAACvC,SAAS,KAAKrE,MAAM,UAAU2E,UAAU,SAAQjH,SACtD2H,IAEHnG,cAAC0F,EAAS,CACRC,MAAM,gBACNtC,YAAY,4BACZE,aAAa,MACbH,KAAK,kBAGTpD,cAAC2H,IAAW,CAAAnJ,SACVwB,cAACO,IAAM,CAACkD,YAAY,OAAOD,KAAK,SAAQhF,SAAC,uBAO3C,EClBGoJ,MAjCCA,KACd,MAAM,WAAEjE,GAAenC,qBAAWoC,IAC5B,OAAE2C,EAAM,OAAEsB,EAAM,QAAErB,GAAYsB,cACpC,OACEnF,eAAAoF,WAAA,CAAAvJ,SAAA,CACEmE,eAACyB,IAAM,CAAC4D,GAAG,SAAQxJ,SAAA,CACjBmE,eAACC,IAAM,CAAC0B,QAAQ,eAAevB,EAAE,OAAMvE,SAAA,CACrCwB,cAAC0H,IAAO,CAACpE,KAAK,KAAI9E,SAAC,eACnBwB,cAACO,IAAM,CAACC,QAASqH,EAAOrJ,SACtBwB,cAACiI,IAAQ,SAGbjI,cAACkI,IAAO,IACRlI,cAACoE,IAAM,CAACvB,GAAIsF,IAAQ3J,SACjBmF,EAAWc,KAAIC,GACd/B,eAACC,IAAM,CAACC,GAAIuF,IAAI5J,SAAA,CACdwB,cAACqI,IAAM,CACLjD,GACE,GAAKV,EAAO4D,YAAc,OAAS,YAAc,UAEnDvF,EAAE,OACFsB,EAAE,SAEJrE,cAACiF,IAAI,CAAAzG,SAAEkG,EAAOa,aAAgB,UAAArG,OARAwF,WAatC1E,cAACsG,EAAc,CAACC,OAAQA,EAAQC,QAASA,MACxC,ECNQ+B,MApCQA,CAAC3B,EAAerF,EAAaP,KAClD,MAAM,QAAEtC,GAAY8C,qBAAWnD,GAC/BF,qBAAU,KACR6C,EAAOwH,UACPxH,EAAOyH,GAAG,WAAW9E,IACnBiD,EAAcjD,EAAW,IAE3B3C,EAAOyH,GAAG,YAAY5E,IACpBtC,EAAYsC,EAAS,IAEvB7C,EAAOyH,GAAG,MAAM5G,IACdN,GAAYkB,GAAY,CAACZ,KAAYY,IAAU,IAEjDzB,EAAOyH,GAAG,aAAa,CAAC5I,EAAQ0F,KAC9BqB,GAAc8B,GACL,IAAIA,GAAajE,KAAIC,IACtBA,EAAOa,WAAaA,IACtBb,EAAO4D,UAAYzI,GAEd6E,MAET,IAEJ1D,EAAOyH,GAAG,iBAAiB,KACzB/J,EAAQ,CAAEC,UAAU,GAAQ,IAEvB,KACLqC,EAAO2H,IAAI,iBACX3H,EAAO2H,IAAI,aACX3H,EAAO2H,IAAI,WACX3H,EAAO2H,IAAI,YACX3H,EAAO2H,IAAI,KAAK,IAEjB,CAACjK,EAASkI,EAAerF,EAAaP,GAAQ,EC5B5C,MAAM4C,EAAgB3F,0BAChBwD,EAAkBxD,0BAClByD,EAAgBzD,0BAoCd2K,MAlCFA,KAAO,IAADC,EACjB,MAAOlF,EAAYiD,GAAiB1I,mBAAS,KACtC2F,EAAUtC,GAAerD,mBAAS,KAClC4K,EAAaC,GAAkB7K,mBAAS,IAEzC,KAAEO,GAAS+C,qBAAWnD,IACrB2C,EAAQgI,GAAa9K,oBAAS,IAAM+K,EAAWxK,KAKtD,OAJAN,qBAAU,KACR6K,GAAU,IAAMC,EAAWxK,IAAM,GAChC,CAACA,IACJ8J,EAAe3B,EAAerF,EAAaP,GAEzChB,cAAC4D,EAAc3D,SAAQ,CAACC,MAAO,CAAEyD,aAAYiD,iBAAgBpI,SAC3DwB,cAAC0B,EAAczB,SAAQ,CAACC,MAAO,CAAEc,UAASxC,SACxCmE,eAACuG,IAAI,CACHC,gBAAgB,kBAChB9E,EAAE,QACFxB,GAAIuG,IACJC,SAAUC,GAASP,EAAeO,GAAO9K,SAAA,CAEzCwB,cAACuJ,IAAQ,CAACC,QAAQ,IAAIC,YAAY,iBAAgBjL,SAChDwB,cAAC4H,EAAO,MAEV5H,cAACuJ,IAAQ,CAACC,QAAQ,IAAIE,KAAK,QAAOlL,SAChCwB,cAACyB,EAAgBxB,SAAQ,CAACC,MAAO,CAAE2D,WAAUtC,eAAc/C,SACzDwB,cAAC0D,EAAI,CAACpC,OAA+B,QAAzBuH,EAAElF,EAAWmF,UAAY,IAAAD,OAAA,EAAvBA,EAAyBvH,mBAKxB,ECoDdqI,MAhFDA,KACZ,MAAM,QAAEjL,GAAY8C,qBAAWnD,IACxB8H,EAAOM,GAAYvI,mBAAS,MAC7Ba,EAAWC,wBACjB,OACEgB,cAAC2B,IAAM,CACLC,cAAe,CAAE2D,SAAU,GAAIqE,SAAU,IACzC9H,iBAAkB+H,aAClB3H,SAAUA,CAACC,EAAQC,KACjB,MAAM0H,EAAO,IAAK3H,GAClBC,EAAQM,YACRzD,MAAM,GAADC,OAAIC,mIAAYC,qBAAoB,eAAe,CACtD2K,OAAQ,OACR1K,YAAa,UACbC,QAAS,CACP,eAAgB,oBAElB0K,KAAMC,KAAKC,UAAUJ,KAEpBtK,OAAMC,IACC,IAEPC,MAAKyK,IACJ,GAAKA,GAAQA,EAAIvK,MAAMuK,EAAItK,QAAU,KAGrC,OAAOsK,EAAIrK,MAAM,IAElBJ,MAAKK,IACCA,IACLrB,EAAQ,IAAKqB,IACTA,EAAKF,OACP4G,EAAS1G,EAAKF,QACLE,EAAKpB,WACdE,aAAauL,QAAQ,QAASrK,EAAKnB,OACnCG,EAAS,UACX,GACA,EACJP,SAEFmE,eAACyB,IAAM,CACLvB,GAAIC,IACJC,EAAG,CAAEsH,KAAM,MAAOC,GAAI,SACtB1J,EAAE,OACF0D,QAAQ,SACRD,EAAE,QACFkG,QAAQ,OAAM/L,SAAA,CAEdwB,cAAC0H,IAAO,CAAAlJ,SAAC,WACTwB,cAACiF,IAAI,CAACpC,GAAG,IAAI/B,MAAM,UAAStC,SACzB2H,IAEHnG,cAAC0F,EAAS,CACRtC,KAAK,WACLC,YAAY,iBACZE,aAAa,MACboC,MAAM,aAGR3F,cAAC0F,EAAS,CACRtC,KAAK,WACLC,YAAY,iBACZE,aAAa,MACboC,MAAM,WACNnC,KAAK,aAGPb,eAAC6H,IAAW,CAAChF,GAAG,OAAMhH,SAAA,CACpBwB,cAACO,IAAM,CAACkD,YAAY,OAAOD,KAAK,SAAQhF,SAAC,WAGzCwB,cAACO,IAAM,CAACC,QAASA,IAAMzB,EAAS,aAAaP,SAAC,0BAK3C,ECKEiM,MAhFAA,KACb,MAAM,QAAE/L,GAAY8C,qBAAWnD,IACxB8H,EAAOM,GAAYvI,mBAAS,MAC7Ba,EAAWC,wBACjB,OACEgB,cAAC2B,IAAM,CACLC,cAAe,CAAE2D,SAAU,GAAIqE,SAAU,IACzC9H,iBAAkB+H,aAClB3H,SAAUA,CAACC,EAAQC,KACjB,MAAM0H,EAAO,IAAK3H,GAClBC,EAAQM,YACRzD,MAAM,GAADC,OAAIC,mIAAYC,qBAAoB,gBAAgB,CACvD2K,OAAQ,OACR1K,YAAa,UACbC,QAAS,CACP,eAAgB,oBAElB0K,KAAMC,KAAKC,UAAUJ,KAEpBtK,OAAMC,IACC,IAEPC,MAAKyK,IACJ,GAAKA,GAAQA,EAAIvK,MAAMuK,EAAItK,QAAU,KAGrC,OAAOsK,EAAIrK,MAAM,IAElBJ,MAAKK,IACCA,IACLrB,EAAQ,IAAKqB,IACTA,EAAKF,OACP4G,EAAS1G,EAAKF,QACLE,EAAKpB,WACdE,aAAauL,QAAQ,QAASrK,EAAKnB,OACnCG,EAAS,UACX,GACA,EACJP,SAEFmE,eAACyB,IAAM,CACLvB,GAAIC,IACJC,EAAG,CAAEsH,KAAM,MAAOC,GAAI,SACtB1J,EAAE,OACF0D,QAAQ,SACRD,EAAE,QACFkG,QAAQ,OAAM/L,SAAA,CAEdwB,cAAC0H,IAAO,CAAAlJ,SAAC,YACTwB,cAACiF,IAAI,CAACpC,GAAG,IAAI/B,MAAM,UAAStC,SACzB2H,IAEHnG,cAAC0F,EAAS,CACRtC,KAAK,WACLC,YAAY,iBACZE,aAAa,MACboC,MAAM,aAGR3F,cAAC0F,EAAS,CACRtC,KAAK,WACLC,YAAY,iBACZE,aAAa,MACboC,MAAM,WACNnC,KAAK,aAGPb,eAAC6H,IAAW,CAAChF,GAAG,OAAMhH,SAAA,CACpBwB,cAACO,IAAM,CAACkD,YAAY,OAAOD,KAAK,SAAQhF,SAAC,mBAGzCwB,cAACO,IAAM,CAACC,QAASA,IAAMzB,EAAS,KAAM2L,SAAU1K,cAAC2K,IAAa,IAAInM,SAAC,gBAKhE,ECxFb,MAAM,OAAEoM,EAAM,SAAEC,GAAazM,EAAQ,GAYtB0M,MALOA,IALNC,MACd,MAAM,KAAEtM,GAAS+C,qBAAWnD,GAC5B,OAAOI,GAAQA,EAAKE,QAAQ,EAIboM,GACC/K,cAAC4K,EAAM,IAAM5K,cAAC6K,EAAQ,CAACxI,GAAG,MCa7B2I,MAhBDA,KACZ,MAAM,KAAEvM,GAAS+C,qBAAWnD,GAC5B,OAAyB,OAAlBI,EAAKE,SACVqB,cAACiF,IAAI,CAAAzG,SAAC,eAENmE,eAACsI,SAAM,CAAAzM,SAAA,CACLwB,cAACkL,QAAK,CAACC,KAAK,IAAIC,QAASpL,cAAC2J,EAAK,MAC/B3J,cAACkL,QAAK,CAACC,KAAK,YAAYC,QAASpL,cAACyK,EAAM,MACxCzK,cAACkL,QAAK,CAACE,QAASpL,cAAC8K,EAAa,IAAItM,SAChCwB,cAACkL,QAAK,CAACC,KAAK,QAAQC,QAASpL,cAAC4I,EAAI,QAEpC5I,cAACkL,QAAK,CAACC,KAAK,IAAIC,QAASpL,cAAC2J,EAAK,QAElC,ECTY0B,MATf,WACE,OACE1I,eAACrE,EAAW,CAAAE,SAAA,CACVwB,cAACgL,EAAK,IACNhL,cAACG,EAAe,MAGtB,ECcemL,kBAvBD,CACZC,OAAQ,CACNC,gBAAiB,OACjBC,oBAAoB,GAEtBC,OAAQ,CACNC,OAAQ,CACN3B,KAAM,CACJ4B,OAAQ,EACRC,WACE,kJACFC,oBAAqB,cACrBC,oBAAqB,aAGvBC,KAAM,CACJH,WACE,yECXVI,IAASC,OACPlM,cAACmM,IAAMC,WAAU,CAAA5N,SACfwB,cAACqM,IAAU,CAAA7N,SACTmE,eAAC2J,IAAc,CAACC,MAAOA,EAAM/N,SAAA,CAC3BwB,cAACwM,IAAe,CAACC,iBAAkBF,EAAMhB,OAAOkB,mBAChDzM,cAACqL,EAAG,WAIVqB,SAASC,eAAe,Q,qBCjB1B,MAAM5K,EAAM3D,EAAQ,IAEdyL,EAAa9H,EAAI6K,OAAO,CAC5BrH,SAAUxD,EAAI8K,SACXC,SAAS,qBACT9K,IAAI,EAAG,sBACPC,IAAI,GAAI,sBACX2H,SAAU7H,EAAI8K,SACXC,SAAS,qBACT9K,IAAI,EAAG,sBACPC,IAAI,GAAI,wBAGPuF,EAAezF,EAAI6K,OAAO,CAC9B1F,WAAYnF,EAAI8K,SACbC,SAAS,qBACT9K,IAAI,EAAG,qBACPC,IAAI,GAAI,uBAGb8K,EAAOC,QAAU,CAAEnD,aAAYrC,e","file":"static/js/main.34e01d58.chunk.js","sourcesContent":["import { useNavigate } from \"react-router\";\n\nconst { createContext, useState, useEffect } = require(\"react\");\n\nexport const AccountContext = createContext();\n\nconst UserContext = ({ children }) => {\n  const [user, setUser] = useState({\n    loggedIn: null,\n    token: localStorage.getItem(\"token\"),\n  });\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_SERVER_URL}/auth/login`, {\n      credentials: \"include\",\n      headers: {\n        authorization: `Bearer ${user.token}`,\n      },\n    })\n      .catch(err => {\n        setUser({ loggedIn: false });\n        return;\n      })\n      .then(r => {\n        if (!r || !r.ok || r.status >= 400) {\n          setUser({ loggedIn: false });\n          return;\n        }\n        return r.json();\n      })\n      .then(data => {\n        if (!data) {\n          setUser({ loggedIn: false });\n          return;\n        }\n        setUser({ ...data });\n        navigate(\"/home\");\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return (\n    <AccountContext.Provider value={{ user, setUser }}>\n      {children}\n    </AccountContext.Provider>\n  );\n};\n\nexport default UserContext;\n","import { Button } from \"@chakra-ui/button\";\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\n\nconst ToggleColorMode = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  return (\n    <Button\n      onClick={() => toggleColorMode()}\n      pos=\"absolute\"\n      top=\"0\"\n      right=\"0\"\n      m=\"1rem\"\n    >\n      {colorMode === \"dark\" ? (\n        <SunIcon color=\"orange.200\" />\n      ) : (\n        <MoonIcon color=\"blue.700\" />\n      )}\n    </Button>\n  );\n};\n\nexport default ToggleColorMode;\n","import { io } from \"socket.io-client\";\n\nconst socket = user =>\n  new io(process.env.REACT_APP_SERVER_URL, {\n    autoConnect: false,\n    withCredentials: true,\n    auth: {\n      token: user.token,\n    },\n  });\n\nexport default socket;\n","import { Button } from \"@chakra-ui/button\";\nimport { Input } from \"@chakra-ui/input\";\nimport { HStack } from \"@chakra-ui/layout\";\nimport { Field, Form, Formik } from \"formik\";\nimport { useContext } from \"react\";\nimport * as Yup from \"yup\";\nimport { MessagesContext, SocketContext } from \"./Home\";\n\nconst ChatBox = ({ userid }) => {\n  const { setMessages } = useContext(MessagesContext);\n  const { socket } = useContext(SocketContext);\n  return (\n    <Formik\n      initialValues={{ message: \"\" }}\n      validationSchema={Yup.object({\n        message: Yup.string().min(1).max(255),\n      })}\n      onSubmit={(values, actions) => {\n        const message = { to: userid, from: null, content: values.message };\n        socket.emit(\"dm\", message);\n        setMessages(prevMsgs => [message, ...prevMsgs]);\n        actions.resetForm();\n      }}\n    >\n      <HStack as={Form} w=\"100%\" pb=\"1.4rem\" px=\"1.4rem\">\n        <Input\n          as={Field}\n          name=\"message\"\n          placeholder=\"Type message here..\"\n          size=\"lg\"\n          autoComplete=\"off\"\n        />\n        <Button type=\"submit\" size=\"lg\" colorScheme=\"teal\">\n          Send\n        </Button>\n      </HStack>\n    </Formik>\n  );\n};\n\nexport default ChatBox;\n","import { Text, VStack } from \"@chakra-ui/layout\";\nimport { TabPanel, TabPanels } from \"@chakra-ui/tabs\";\nimport { useContext, useEffect, useRef } from \"react\";\nimport ChatBox from \"./ChatBox\";\nimport { FriendContext, MessagesContext } from \"./Home\";\n\nconst Chat = ({ userid }) => {\n  const { friendList } = useContext(FriendContext);\n  const { messages } = useContext(MessagesContext);\n  const bottomDiv = useRef(null);\n\n  useEffect(() => {\n    bottomDiv.current?.scrollIntoView();\n  });\n\n  return friendList.length > 0 ? (\n    <VStack h=\"100%\" justify=\"end\">\n      <TabPanels overflowY=\"scroll\">\n        {friendList.map(friend => (\n          <VStack\n            flexDir=\"column-reverse\"\n            as={TabPanel}\n            key={`chat:${friend.username}`}\n            w=\"100%\"\n          >\n            <div ref={bottomDiv} />\n            {messages\n              .filter(\n                msg => msg.to === friend.userid || msg.from === friend.userid\n              )\n              .map((message, idx) => (\n                <Text\n                  m={\n                    message.to === friend.userid\n                      ? \"1rem 0 0 auto !important\"\n                      : \"1rem auto 0 0 !important\"\n                  }\n                  maxW=\"50%\"\n                  key={`msg:${friend.username}.${idx}`}\n                  fontSize=\"lg\"\n                  bg={message.to === friend.userid ? \"blue.100\" : \"gray.100\"}\n                  color=\"gray.800\"\n                  borderRadius=\"10px\"\n                  p=\"0.5rem 1rem\"\n                >\n                  {message.content}\n                </Text>\n              ))}\n          </VStack>\n        ))}\n      </TabPanels>\n      <ChatBox userid={userid} />\n    </VStack>\n  ) : (\n    <VStack\n      justify=\"center\"\n      pt=\"5rem\"\n      w=\"100%\"\n      textAlign=\"center\"\n      fontSize=\"lg\"\n    >\n      <TabPanels>\n        <TabPanel>\n          <Text>No friend :( Click add friend to start chatting</Text>\n        </TabPanel>\n      </TabPanels>\n    </VStack>\n  );\n};\n\nexport default Chat;\n","import {\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n} from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Field, useField } from \"formik\";\n\nconst TextField = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <FormControl isInvalid={meta.touched && meta.error}>\n      <FormLabel>{label}</FormLabel>\n      <Input as={Field} {...field} {...props} />\n      <FormErrorMessage>{meta.error}</FormErrorMessage>\n    </FormControl>\n  );\n};\n\nexport default TextField;\n","import {\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n} from \"@chakra-ui/modal\";\nimport { Button, Heading, ModalOverlay } from \"@chakra-ui/react\";\nimport { friendSchema } from \"@whatsapp-clone/common\";\nimport { Form, Formik } from \"formik\";\nimport { useCallback, useContext, useState } from \"react\";\nimport TextField from \"../TextField\";\nimport { FriendContext, SocketContext } from \"./Home\";\n\nconst AddFriendModal = ({ isOpen, onClose }) => {\n  const [error, setError] = useState(\"\");\n  const closeModal = useCallback(() => {\n    setError(\"\");\n    onClose();\n  }, [onClose]);\n  const { setFriendList } = useContext(FriendContext);\n  const { socket } = useContext(SocketContext);\n  return (\n    <Modal isOpen={isOpen} onClose={closeModal}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Add a friend!</ModalHeader>\n        <ModalCloseButton />\n        <Formik\n          initialValues={{ friendName: \"\" }}\n          onSubmit={values => {\n            socket.emit(\n              \"add_friend\",\n              values.friendName,\n              ({ errorMsg, done, newFriend }) => {\n                if (done) {\n                  setFriendList(c => [newFriend, ...c]);\n                  closeModal();\n                  return;\n                }\n                setError(errorMsg);\n              }\n            );\n          }}\n          validationSchema={friendSchema}\n        >\n          <Form>\n            <ModalBody>\n              <Heading fontSize=\"xl\" color=\"red.500\" textAlign=\"center\">\n                {error}\n              </Heading>\n              <TextField\n                label=\"Friend's name\"\n                placeholder=\"Enter friend's username..\"\n                autoComplete=\"off\"\n                name=\"friendName\"\n              />\n            </ModalBody>\n            <ModalFooter>\n              <Button colorScheme=\"blue\" type=\"submit\">\n                Submit\n              </Button>\n            </ModalFooter>\n          </Form>\n        </Formik>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default AddFriendModal;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { ChatIcon } from \"@chakra-ui/icons\";\nimport {\n  Circle,\n  Divider,\n  Heading,\n  HStack,\n  Text,\n  VStack,\n} from \"@chakra-ui/layout\";\nimport { Tab, TabList } from \"@chakra-ui/tabs\";\nimport { useContext } from \"react\";\nimport AddFriendModal from \"./AddFriendModal\";\nimport { FriendContext } from \"./Home\";\n\nconst Sidebar = () => {\n  const { friendList } = useContext(FriendContext);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  return (\n    <>\n      <VStack py=\"1.4rem\">\n        <HStack justify=\"space-evenly\" w=\"100%\">\n          <Heading size=\"md\">Add Friend</Heading>\n          <Button onClick={onOpen}>\n            <ChatIcon />\n          </Button>\n        </HStack>\n        <Divider />\n        <VStack as={TabList}>\n          {friendList.map(friend => (\n            <HStack as={Tab} key={`friend:${friend}`}>\n              <Circle\n                bg={\n                  \"\" + friend.connected === \"true\" ? \"green.700\" : \"red.500\"\n                }\n                w=\"20px\"\n                h=\"20px\"\n              />\n              <Text>{friend.username}</Text>\n            </HStack>\n          ))}\n        </VStack>\n      </VStack>\n      <AddFriendModal isOpen={isOpen} onClose={onClose} />\n    </>\n  );\n};\n\nexport default Sidebar;\n","import { useContext, useEffect } from \"react\";\nimport { AccountContext } from \"../AccountContext\";\n\nconst useSocketSetup = (setFriendList, setMessages, socket) => {\n  const { setUser } = useContext(AccountContext);\n  useEffect(() => {\n    socket.connect();\n    socket.on(\"friends\", friendList => {\n      setFriendList(friendList);\n    });\n    socket.on(\"messages\", messages => {\n      setMessages(messages);\n    });\n    socket.on(\"dm\", message => {\n      setMessages(prevMsgs => [message, ...prevMsgs]);\n    });\n    socket.on(\"connected\", (status, username) => {\n      setFriendList(prevFriends => {\n        return [...prevFriends].map(friend => {\n          if (friend.username === username) {\n            friend.connected = status;\n          }\n          return friend;\n        });\n      });\n    });\n    socket.on(\"connect_error\", () => {\n      setUser({ loggedIn: false });\n    });\n    return () => {\n      socket.off(\"connect_error\");\n      socket.off(\"connected\");\n      socket.off(\"friends\");\n      socket.off(\"messages\");\n      socket.off(\"dm\");\n    };\n  }, [setUser, setFriendList, setMessages, socket]);\n};\n\nexport default useSocketSetup;\n","import { Grid, GridItem, Tabs } from \"@chakra-ui/react\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport socketConn from \"../../socket\";\nimport { AccountContext } from \"../AccountContext\";\nimport Chat from \"./Chat\";\nimport Sidebar from \"./Sidebar\";\nimport useSocketSetup from \"./useSocketSetup\";\n\nexport const FriendContext = createContext();\nexport const MessagesContext = createContext();\nexport const SocketContext = createContext();\n\nconst Home = () => {\n  const [friendList, setFriendList] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [friendIndex, setFriendIndex] = useState(0);\n\n  const { user } = useContext(AccountContext);\n  const [socket, setSocket] = useState(() => socketConn(user));\n  useEffect(() => {\n    setSocket(() => socketConn(user));\n  }, [user]);\n  useSocketSetup(setFriendList, setMessages, socket);\n  return (\n    <FriendContext.Provider value={{ friendList, setFriendList }}>\n      <SocketContext.Provider value={{ socket }}>\n        <Grid\n          templateColumns=\"repeat(10, 1fr)\"\n          h=\"100vh\"\n          as={Tabs}\n          onChange={index => setFriendIndex(index)}\n        >\n          <GridItem colSpan=\"3\" borderRight=\"1px solid gray\">\n            <Sidebar />\n          </GridItem>\n          <GridItem colSpan=\"7\" maxH=\"100vh\">\n            <MessagesContext.Provider value={{ messages, setMessages }}>\n              <Chat userid={friendList[friendIndex]?.userid} />\n            </MessagesContext.Provider>\n          </GridItem>\n        </Grid>\n      </SocketContext.Provider>\n    </FriendContext.Provider>\n  );\n};\n\nexport default Home;\n","import {\n  Button,\n  ButtonGroup,\n  Heading,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { formSchema } from \"@whatsapp-clone/common\";\nimport { Form, Formik } from \"formik\";\nimport { useContext, useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { AccountContext } from \"../AccountContext\";\nimport TextField from \"../TextField\";\n\nconst Login = () => {\n  const { setUser } = useContext(AccountContext);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  return (\n    <Formik\n      initialValues={{ username: \"\", password: \"\" }}\n      validationSchema={formSchema}\n      onSubmit={(values, actions) => {\n        const vals = { ...values };\n        actions.resetForm();\n        fetch(`${process.env.REACT_APP_SERVER_URL}/auth/login`, {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(vals),\n        })\n          .catch(err => {\n            return;\n          })\n          .then(res => {\n            if (!res || !res.ok || res.status >= 400) {\n              return;\n            }\n            return res.json();\n          })\n          .then(data => {\n            if (!data) return;\n            setUser({ ...data });\n            if (data.status) {\n              setError(data.status);\n            } else if (data.loggedIn) {\n              localStorage.setItem(\"token\", data.token);\n              navigate(\"/home\");\n            }\n          });\n      }}\n    >\n      <VStack\n        as={Form}\n        w={{ base: \"90%\", md: \"500px\" }}\n        m=\"auto\"\n        justify=\"center\"\n        h=\"100vh\"\n        spacing=\"1rem\"\n      >\n        <Heading>Log In</Heading>\n        <Text as=\"p\" color=\"red.500\">\n          {error}\n        </Text>\n        <TextField\n          name=\"username\"\n          placeholder=\"Enter username\"\n          autoComplete=\"off\"\n          label=\"Username\"\n        />\n\n        <TextField\n          name=\"password\"\n          placeholder=\"Enter password\"\n          autoComplete=\"off\"\n          label=\"Password\"\n          type=\"password\"\n        />\n\n        <ButtonGroup pt=\"1rem\">\n          <Button colorScheme=\"teal\" type=\"submit\">\n            Log In\n          </Button>\n          <Button onClick={() => navigate(\"/register\")}>\n            Create Account\n          </Button>\n        </ButtonGroup>\n      </VStack>\n    </Formik>\n  );\n};\n\nexport default Login;\n","import { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport {\n  Button,\n  ButtonGroup,\n  Heading,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { formSchema } from \"@whatsapp-clone/common\";\nimport { Form, Formik } from \"formik\";\nimport { useContext, useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { AccountContext } from \"../AccountContext\";\nimport TextField from \"../TextField\";\n\nconst SignUp = () => {\n  const { setUser } = useContext(AccountContext);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  return (\n    <Formik\n      initialValues={{ username: \"\", password: \"\" }}\n      validationSchema={formSchema}\n      onSubmit={(values, actions) => {\n        const vals = { ...values };\n        actions.resetForm();\n        fetch(`${process.env.REACT_APP_SERVER_URL}/auth/signup`, {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(vals),\n        })\n          .catch(err => {\n            return;\n          })\n          .then(res => {\n            if (!res || !res.ok || res.status >= 400) {\n              return;\n            }\n            return res.json();\n          })\n          .then(data => {\n            if (!data) return;\n            setUser({ ...data });\n            if (data.status) {\n              setError(data.status);\n            } else if (data.loggedIn) {\n              localStorage.setItem(\"token\", data.token);\n              navigate(\"/home\");\n            }\n          });\n      }}\n    >\n      <VStack\n        as={Form}\n        w={{ base: \"90%\", md: \"500px\" }}\n        m=\"auto\"\n        justify=\"center\"\n        h=\"100vh\"\n        spacing=\"1rem\"\n      >\n        <Heading>Sign Up</Heading>\n        <Text as=\"p\" color=\"red.500\">\n          {error}\n        </Text>\n        <TextField\n          name=\"username\"\n          placeholder=\"Enter username\"\n          autoComplete=\"off\"\n          label=\"Username\"\n        />\n\n        <TextField\n          name=\"password\"\n          placeholder=\"Enter password\"\n          autoComplete=\"off\"\n          label=\"Password\"\n          type=\"password\"\n        />\n\n        <ButtonGroup pt=\"1rem\">\n          <Button colorScheme=\"teal\" type=\"submit\">\n            Create Account\n          </Button>\n          <Button onClick={() => navigate(\"/\")} leftIcon={<ArrowBackIcon />}>\n            Back\n          </Button>\n        </ButtonGroup>\n      </VStack>\n    </Formik>\n  );\n};\n\nexport default SignUp;\n","import { useContext } from \"react\";\nimport { AccountContext } from \"./AccountContext\";\n\nconst { Outlet, Navigate } = require(\"react-router\");\n\nconst useAuth = () => {\n  const { user } = useContext(AccountContext);\n  return user && user.loggedIn;\n};\n\nconst PrivateRoutes = () => {\n  const isAuth = useAuth();\n  return isAuth ? <Outlet /> : <Navigate to=\"/\" />;\n};\n\nexport default PrivateRoutes;\n","import { Text } from \"@chakra-ui/layout\";\nimport { useContext } from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport { AccountContext } from \"./AccountContext\";\nimport Home from \"./Home/Home\";\nimport Login from \"./Login/Login\";\nimport SignUp from \"./Login/SignUp\";\nimport PrivateRoutes from \"./PrivateRoutes\";\n\nconst Views = () => {\n  const { user } = useContext(AccountContext);\n  return user.loggedIn === null ? (\n    <Text>Loading...</Text>\n  ) : (\n    <Routes>\n      <Route path=\"/\" element={<Login />} />\n      <Route path=\"/register\" element={<SignUp />} />\n      <Route element={<PrivateRoutes />}>\n        <Route path=\"/home\" element={<Home />} />\n      </Route>\n      <Route path=\"*\" element={<Login />} />\n    </Routes>\n  );\n};\n\nexport default Views;\n","import UserContext from \"./components/AccountContext\";\nimport ToggleColorMode from \"./components/ToggleColorMode\";\nimport Views from \"./components/Views\";\n\nfunction App() {\n  return (\n    <UserContext>\n      <Views />\n      <ToggleColorMode />\n    </UserContext>\n  );\n}\n\nexport default App;\n","import { extendTheme } from \"@chakra-ui/react\";\n\nconst theme = {\n  config: {\n    intialColorMode: \"dark\",\n    useSystemColorMode: true,\n  },\n  styles: {\n    global: {\n      body: {\n        margin: 0,\n        fontFamily:\n          \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen','Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',sans-serif\",\n        WebKitFontSmoothing: \"antialiased\",\n        MozOsxFontSmoothing: \"grayscale\",\n      },\n\n      code: {\n        fontFamily:\n          \"source-code-pro, Menlo, Monaco, Consolas, 'Courier New',monospace\",\n      },\n    },\n  },\n};\n\nexport default extendTheme(theme);\n","import { ColorModeScript } from \"@chakra-ui/color-mode\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <ChakraProvider theme={theme}>\n        <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n        <App />\n      </ChakraProvider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","const Yup = require(\"yup\");\n\nconst formSchema = Yup.object({\n  username: Yup.string()\n    .required(\"Username required\")\n    .min(6, \"Username too short\")\n    .max(28, \"Username too long!\"),\n  password: Yup.string()\n    .required(\"Password required\")\n    .min(6, \"Password too short\")\n    .max(28, \"Password too long!\"),\n});\n\nconst friendSchema = Yup.object({\n  friendName: Yup.string()\n    .required(\"Username required\")\n    .min(6, \"Invalid username!\")\n    .max(28, \"Invalid username!\"),\n});\n\nmodule.exports = { formSchema, friendSchema };\n"],"sourceRoot":""}