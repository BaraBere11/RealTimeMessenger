{"ast":null,"code":"import { useEnvironment } from '@chakra-ui/react-env';\nimport { noop, isBrowser, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar classNames = {\n  light: \"chakra-ui-light\",\n  dark: \"chakra-ui-dark\"\n};\n\n/**\n * SSR: Graceful fallback for the `body` element\n */\nvar mockBody = {\n  classList: {\n    add: noop,\n    remove: noop\n  }\n};\nvar getBody = function getBody(document) {\n  return isBrowser ? document.body : mockBody;\n};\n/**\n * Function to add/remove class from `body` based on color mode\n */\n\nfunction syncBodyClassName(isDark, document) {\n  var body = getBody(document);\n  body.classList.add(isDark ? classNames.dark : classNames.light);\n  body.classList.remove(isDark ? classNames.light : classNames.dark);\n}\n/**\n * Check if JS media query matches the query string passed\n */\n\nfunction getMediaQuery(query) {\n  var mediaQueryList = window.matchMedia == null ? void 0 : window.matchMedia(query);\n  if (!mediaQueryList) {\n    return undefined;\n  }\n  return !!mediaQueryList.media === mediaQueryList.matches;\n}\nvar queries = {\n  light: \"(prefers-color-scheme: light)\",\n  dark: \"(prefers-color-scheme: dark)\"\n};\nfunction getColorScheme(fallback) {\n  var _getMediaQuery;\n  var isDark = (_getMediaQuery = getMediaQuery(queries.dark)) != null ? _getMediaQuery : fallback === \"dark\";\n  return isDark ? \"dark\" : \"light\";\n}\n/**\n * Adds system os color mode listener, and run the callback\n * once preference changes\n */\n\nfunction addListener(fn) {\n  if (!(\"matchMedia\" in window)) {\n    return noop;\n  }\n  var mediaQueryList = window.matchMedia(queries.dark);\n  var listener = function listener() {\n    fn(mediaQueryList.matches ? \"dark\" : \"light\", true);\n  };\n  mediaQueryList.addEventListener(\"change\", listener);\n  return function () {\n    mediaQueryList.removeEventListener(\"change\", listener);\n  };\n}\nvar root = {\n  get: function get() {\n    return document.documentElement.style.getPropertyValue(\"--chakra-ui-color-mode\");\n  },\n  set: function set(mode) {\n    if (isBrowser) {\n      document.documentElement.style.setProperty(\"--chakra-ui-color-mode\", mode);\n    }\n  }\n};\nvar hasSupport = function hasSupport() {\n  return typeof Storage !== \"undefined\";\n};\nvar storageKey = \"chakra-ui-color-mode\";\n\n/**\n * Simple object to handle read-write to localStorage\n */\nvar localStorageManager = {\n  get: function get(init) {\n    if (!hasSupport()) return init;\n    try {\n      var _value = localStorage.getItem(storageKey);\n      return _value != null ? _value : init;\n    } catch (error) {\n      if (__DEV__) {\n        console.log(error);\n      }\n      return init;\n    }\n  },\n  set: function set(value) {\n    if (!hasSupport()) return;\n    try {\n      localStorage.setItem(storageKey, value);\n    } catch (error) {\n      if (__DEV__) {\n        console.log(error);\n      }\n    }\n  },\n  type: \"localStorage\"\n};\n/**\n * Simple object to handle read-write to cookies\n */\n\nvar cookieStorageManager = function cookieStorageManager(cookies) {\n  if (cookies === void 0) {\n    cookies = \"\";\n  }\n  return {\n    get: function get(init) {\n      var match = cookies.match(new RegExp(\"(^| )\" + storageKey + \"=([^;]+)\"));\n      if (match) {\n        return match[2];\n      }\n      return init;\n    },\n    set: function set(value) {\n      document.cookie = storageKey + \"=\" + value + \"; max-age=31536000; path=/\";\n    },\n    type: \"cookie\"\n  };\n};\nvar ColorModeContext = /*#__PURE__*/React.createContext({});\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\";\n}\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\n\nvar useColorMode = function useColorMode() {\n  var context = React.useContext(ColorModeContext);\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n  return context;\n};\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nfunction ColorModeProvider(props) {\n  var value = props.value,\n    children = props.children,\n    _props$options = props.options,\n    useSystemColorMode = _props$options.useSystemColorMode,\n    initialColorMode = _props$options.initialColorMode,\n    _props$colorModeManag = props.colorModeManager,\n    colorModeManager = _props$colorModeManag === void 0 ? localStorageManager : _props$colorModeManag;\n  var defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n\n  var _React$useState = React.useState(colorModeManager.type === \"cookie\" ? colorModeManager.get(defaultColorMode) : defaultColorMode),\n    colorMode = _React$useState[0],\n    rawSetColorMode = _React$useState[1];\n  var _useEnvironment = useEnvironment(),\n    document = _useEnvironment.document;\n  React.useEffect(function () {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     *\n     * Priority:\n     * - if `useSystemColorMode` is true system-color will be used as default - initial\n     * colormode is the fallback if system color mode isn't resolved\n     *\n     * - if `--chakra-ui-color-mode` is defined through e.g. `ColorModeScript` this\n     * will be used\n     *\n     * - if `colorModeManager` = `localStorage` and a value is defined for\n     * `chakra-ui-color-mode` this will be used\n     *\n     * - if `initialColorMode` = `system` system-color will be used as default -\n     * initial colormode is the fallback if system color mode isn't resolved\n     *\n     * - if `initialColorMode` = `'light'|'dark'` the corresponding value will be used\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      var systemColorWithFallback = getColorScheme(defaultColorMode);\n      if (useSystemColorMode) {\n        return rawSetColorMode(systemColorWithFallback);\n      }\n      var rootGet = root.get();\n      var colorManagerGet = colorModeManager.get();\n      if (rootGet) {\n        return rawSetColorMode(rootGet);\n      }\n      if (colorManagerGet) {\n        return rawSetColorMode(colorManagerGet);\n      }\n      if (initialColorMode === \"system\") {\n        return rawSetColorMode(systemColorWithFallback);\n      }\n      return rawSetColorMode(defaultColorMode);\n    }\n  }, [colorModeManager, useSystemColorMode, defaultColorMode, initialColorMode]);\n  React.useEffect(function () {\n    var isDark = colorMode === \"dark\";\n    syncBodyClassName(isDark, document);\n    root.set(isDark ? \"dark\" : \"light\");\n  }, [colorMode, document]);\n  var setColorMode = React.useCallback(function (value, isListenerEvent) {\n    if (isListenerEvent === void 0) {\n      isListenerEvent = false;\n    }\n    if (!isListenerEvent) {\n      colorModeManager.set(value);\n    } else if (colorModeManager.get() && !useSystemColorMode) return;\n    rawSetColorMode(value);\n  }, [colorModeManager, useSystemColorMode]);\n  var toggleColorMode = React.useCallback(function () {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\");\n  }, [colorMode, setColorMode]);\n  React.useEffect(function () {\n    var shouldUseSystemListener = useSystemColorMode || initialColorMode === \"system\";\n    var removeListener;\n    if (shouldUseSystemListener) {\n      removeListener = addListener(setColorMode);\n    }\n    return function () {\n      if (removeListener && shouldUseSystemListener) {\n        removeListener();\n      }\n    };\n  }, [setColorMode, useSystemColorMode, initialColorMode]); // presence of `value` indicates a controlled context\n\n  var context = React.useMemo(function () {\n    return {\n      colorMode: value != null ? value : colorMode,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode\n    };\n  }, [colorMode, setColorMode, toggleColorMode, value]);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n    value: context\n  }, children);\n}\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\";\n}\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\n\nvar DarkMode = function DarkMode(props) {\n  var context = React.useMemo(function () {\n    return {\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n    value: context\n  }, props));\n};\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\";\n}\n/**\n * Locks the color mode to `light` without any way to change it.\n */\n\nvar LightMode = function LightMode(props) {\n  var context = React.useMemo(function () {\n    return {\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n    value: context\n  }, props));\n};\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\";\n}\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\n\nfunction useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n    colorMode = _useColorMode.colorMode;\n  return colorMode === \"dark\" ? dark : light;\n}\nfunction setScript(initialValue) {\n  var mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n  var systemPreference = mql.matches ? \"dark\" : \"light\";\n  var persistedPreference;\n  try {\n    persistedPreference = localStorage.getItem(\"chakra-ui-color-mode\");\n  } catch (error) {\n    console.log(\"Chakra UI: localStorage is not available. Color mode persistence might not work as expected\");\n  }\n  var isInStorage = typeof persistedPreference === \"string\";\n  var colorMode;\n  if (isInStorage) {\n    colorMode = persistedPreference;\n  } else {\n    colorMode = initialValue === \"system\" ? systemPreference : initialValue;\n  }\n  if (colorMode) {\n    var root = document.documentElement;\n    root.style.setProperty(\"--chakra-ui-color-mode\", colorMode);\n  }\n}\n\n/**\n * Script to add to the root of your application when using localStorage,\n * to help prevent flash of color mode that can happen during page load.\n */\nvar ColorModeScript = function ColorModeScript(props) {\n  var _props$initialColorMo = props.initialColorMode,\n    initialColorMode = _props$initialColorMo === void 0 ? \"light\" : _props$initialColorMo;\n  var html = \"(\" + String(setScript) + \")('\" + initialColorMode + \"')\";\n  return /*#__PURE__*/React.createElement(\"script\", {\n    nonce: props.nonce,\n    dangerouslySetInnerHTML: {\n      __html: html\n    }\n  });\n};\nexport { ColorModeContext, ColorModeProvider, ColorModeScript, DarkMode, LightMode, cookieStorageManager, localStorageManager, setScript, storageKey, useColorMode, useColorModeValue };","map":{"version":3,"names":["useEnvironment","noop","isBrowser","__DEV__","React","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","classNames","light","dark","mockBody","classList","add","remove","getBody","document","body","syncBodyClassName","isDark","getMediaQuery","query","mediaQueryList","window","matchMedia","undefined","media","matches","queries","getColorScheme","fallback","_getMediaQuery","addListener","fn","listener","addEventListener","removeEventListener","root","get","documentElement","style","getPropertyValue","set","mode","setProperty","hasSupport","Storage","storageKey","localStorageManager","init","_value","localStorage","getItem","error","console","log","value","setItem","type","cookieStorageManager","cookies","match","RegExp","cookie","ColorModeContext","createContext","displayName","useColorMode","context","useContext","Error","ColorModeProvider","props","children","_props$options","options","useSystemColorMode","initialColorMode","_props$colorModeManag","colorModeManager","defaultColorMode","_React$useState","useState","colorMode","rawSetColorMode","_useEnvironment","useEffect","systemColorWithFallback","rootGet","colorManagerGet","setColorMode","useCallback","isListenerEvent","toggleColorMode","shouldUseSystemListener","removeListener","useMemo","createElement","Provider","DarkMode","LightMode","useColorModeValue","_useColorMode","setScript","initialValue","mql","systemPreference","persistedPreference","isInStorage","ColorModeScript","_props$initialColorMo","html","String","nonce","dangerouslySetInnerHTML","__html"],"sources":["/Users/apankov/Documents/WEB_Projects/messenger/node_modules/@chakra-ui/react/node_modules/@chakra-ui/color-mode/dist/chakra-ui-color-mode.esm.js"],"sourcesContent":["import { useEnvironment } from '@chakra-ui/react-env';\nimport { noop, isBrowser, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar classNames = {\n  light: \"chakra-ui-light\",\n  dark: \"chakra-ui-dark\"\n};\n\n/**\n * SSR: Graceful fallback for the `body` element\n */\nvar mockBody = {\n  classList: {\n    add: noop,\n    remove: noop\n  }\n};\n\nvar getBody = function getBody(document) {\n  return isBrowser ? document.body : mockBody;\n};\n/**\n * Function to add/remove class from `body` based on color mode\n */\n\n\nfunction syncBodyClassName(isDark, document) {\n  var body = getBody(document);\n  body.classList.add(isDark ? classNames.dark : classNames.light);\n  body.classList.remove(isDark ? classNames.light : classNames.dark);\n}\n/**\n * Check if JS media query matches the query string passed\n */\n\nfunction getMediaQuery(query) {\n  var mediaQueryList = window.matchMedia == null ? void 0 : window.matchMedia(query);\n\n  if (!mediaQueryList) {\n    return undefined;\n  }\n\n  return !!mediaQueryList.media === mediaQueryList.matches;\n}\n\nvar queries = {\n  light: \"(prefers-color-scheme: light)\",\n  dark: \"(prefers-color-scheme: dark)\"\n};\n\nfunction getColorScheme(fallback) {\n  var _getMediaQuery;\n\n  var isDark = (_getMediaQuery = getMediaQuery(queries.dark)) != null ? _getMediaQuery : fallback === \"dark\";\n  return isDark ? \"dark\" : \"light\";\n}\n/**\n * Adds system os color mode listener, and run the callback\n * once preference changes\n */\n\nfunction addListener(fn) {\n  if (!(\"matchMedia\" in window)) {\n    return noop;\n  }\n\n  var mediaQueryList = window.matchMedia(queries.dark);\n\n  var listener = function listener() {\n    fn(mediaQueryList.matches ? \"dark\" : \"light\", true);\n  };\n\n  mediaQueryList.addEventListener(\"change\", listener);\n  return function () {\n    mediaQueryList.removeEventListener(\"change\", listener);\n  };\n}\nvar root = {\n  get: function get() {\n    return document.documentElement.style.getPropertyValue(\"--chakra-ui-color-mode\");\n  },\n  set: function set(mode) {\n    if (isBrowser) {\n      document.documentElement.style.setProperty(\"--chakra-ui-color-mode\", mode);\n    }\n  }\n};\n\nvar hasSupport = function hasSupport() {\n  return typeof Storage !== \"undefined\";\n};\n\nvar storageKey = \"chakra-ui-color-mode\";\n\n/**\n * Simple object to handle read-write to localStorage\n */\nvar localStorageManager = {\n  get: function get(init) {\n    if (!hasSupport()) return init;\n\n    try {\n      var _value = localStorage.getItem(storageKey);\n\n      return _value != null ? _value : init;\n    } catch (error) {\n      if (__DEV__) {\n        console.log(error);\n      }\n\n      return init;\n    }\n  },\n  set: function set(value) {\n    if (!hasSupport()) return;\n\n    try {\n      localStorage.setItem(storageKey, value);\n    } catch (error) {\n      if (__DEV__) {\n        console.log(error);\n      }\n    }\n  },\n  type: \"localStorage\"\n};\n/**\n * Simple object to handle read-write to cookies\n */\n\nvar cookieStorageManager = function cookieStorageManager(cookies) {\n  if (cookies === void 0) {\n    cookies = \"\";\n  }\n\n  return {\n    get: function get(init) {\n      var match = cookies.match(new RegExp(\"(^| )\" + storageKey + \"=([^;]+)\"));\n\n      if (match) {\n        return match[2];\n      }\n\n      return init;\n    },\n    set: function set(value) {\n      document.cookie = storageKey + \"=\" + value + \"; max-age=31536000; path=/\";\n    },\n    type: \"cookie\"\n  };\n};\n\nvar ColorModeContext = /*#__PURE__*/React.createContext({});\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\";\n}\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\n\n\nvar useColorMode = function useColorMode() {\n  var context = React.useContext(ColorModeContext);\n\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n\n  return context;\n};\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nfunction ColorModeProvider(props) {\n  var value = props.value,\n      children = props.children,\n      _props$options = props.options,\n      useSystemColorMode = _props$options.useSystemColorMode,\n      initialColorMode = _props$options.initialColorMode,\n      _props$colorModeManag = props.colorModeManager,\n      colorModeManager = _props$colorModeManag === void 0 ? localStorageManager : _props$colorModeManag;\n  var defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n\n  var _React$useState = React.useState(colorModeManager.type === \"cookie\" ? colorModeManager.get(defaultColorMode) : defaultColorMode),\n      colorMode = _React$useState[0],\n      rawSetColorMode = _React$useState[1];\n\n  var _useEnvironment = useEnvironment(),\n      document = _useEnvironment.document;\n\n  React.useEffect(function () {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     *\n     * Priority:\n     * - if `useSystemColorMode` is true system-color will be used as default - initial\n     * colormode is the fallback if system color mode isn't resolved\n     *\n     * - if `--chakra-ui-color-mode` is defined through e.g. `ColorModeScript` this\n     * will be used\n     *\n     * - if `colorModeManager` = `localStorage` and a value is defined for\n     * `chakra-ui-color-mode` this will be used\n     *\n     * - if `initialColorMode` = `system` system-color will be used as default -\n     * initial colormode is the fallback if system color mode isn't resolved\n     *\n     * - if `initialColorMode` = `'light'|'dark'` the corresponding value will be used\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      var systemColorWithFallback = getColorScheme(defaultColorMode);\n\n      if (useSystemColorMode) {\n        return rawSetColorMode(systemColorWithFallback);\n      }\n\n      var rootGet = root.get();\n      var colorManagerGet = colorModeManager.get();\n\n      if (rootGet) {\n        return rawSetColorMode(rootGet);\n      }\n\n      if (colorManagerGet) {\n        return rawSetColorMode(colorManagerGet);\n      }\n\n      if (initialColorMode === \"system\") {\n        return rawSetColorMode(systemColorWithFallback);\n      }\n\n      return rawSetColorMode(defaultColorMode);\n    }\n  }, [colorModeManager, useSystemColorMode, defaultColorMode, initialColorMode]);\n  React.useEffect(function () {\n    var isDark = colorMode === \"dark\";\n    syncBodyClassName(isDark, document);\n    root.set(isDark ? \"dark\" : \"light\");\n  }, [colorMode, document]);\n  var setColorMode = React.useCallback(function (value, isListenerEvent) {\n    if (isListenerEvent === void 0) {\n      isListenerEvent = false;\n    }\n\n    if (!isListenerEvent) {\n      colorModeManager.set(value);\n    } else if (colorModeManager.get() && !useSystemColorMode) return;\n\n    rawSetColorMode(value);\n  }, [colorModeManager, useSystemColorMode]);\n  var toggleColorMode = React.useCallback(function () {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\");\n  }, [colorMode, setColorMode]);\n  React.useEffect(function () {\n    var shouldUseSystemListener = useSystemColorMode || initialColorMode === \"system\";\n    var removeListener;\n\n    if (shouldUseSystemListener) {\n      removeListener = addListener(setColorMode);\n    }\n\n    return function () {\n      if (removeListener && shouldUseSystemListener) {\n        removeListener();\n      }\n    };\n  }, [setColorMode, useSystemColorMode, initialColorMode]); // presence of `value` indicates a controlled context\n\n  var context = React.useMemo(function () {\n    return {\n      colorMode: value != null ? value : colorMode,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode\n    };\n  }, [colorMode, setColorMode, toggleColorMode, value]);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n    value: context\n  }, children);\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\";\n}\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\n\n\nvar DarkMode = function DarkMode(props) {\n  var context = React.useMemo(function () {\n    return {\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n    value: context\n  }, props));\n};\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\";\n}\n/**\n * Locks the color mode to `light` without any way to change it.\n */\n\n\nvar LightMode = function LightMode(props) {\n  var context = React.useMemo(function () {\n    return {\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n    value: context\n  }, props));\n};\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\";\n}\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\n\n\nfunction useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return colorMode === \"dark\" ? dark : light;\n}\n\nfunction setScript(initialValue) {\n  var mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n  var systemPreference = mql.matches ? \"dark\" : \"light\";\n  var persistedPreference;\n\n  try {\n    persistedPreference = localStorage.getItem(\"chakra-ui-color-mode\");\n  } catch (error) {\n    console.log(\"Chakra UI: localStorage is not available. Color mode persistence might not work as expected\");\n  }\n\n  var isInStorage = typeof persistedPreference === \"string\";\n  var colorMode;\n\n  if (isInStorage) {\n    colorMode = persistedPreference;\n  } else {\n    colorMode = initialValue === \"system\" ? systemPreference : initialValue;\n  }\n\n  if (colorMode) {\n    var root = document.documentElement;\n    root.style.setProperty(\"--chakra-ui-color-mode\", colorMode);\n  }\n}\n\n/**\n * Script to add to the root of your application when using localStorage,\n * to help prevent flash of color mode that can happen during page load.\n */\nvar ColorModeScript = function ColorModeScript(props) {\n  var _props$initialColorMo = props.initialColorMode,\n      initialColorMode = _props$initialColorMo === void 0 ? \"light\" : _props$initialColorMo;\n  var html = \"(\" + String(setScript) + \")('\" + initialColorMode + \"')\";\n  return /*#__PURE__*/React.createElement(\"script\", {\n    nonce: props.nonce,\n    dangerouslySetInnerHTML: {\n      __html: html\n    }\n  });\n};\n\nexport { ColorModeContext, ColorModeProvider, ColorModeScript, DarkMode, LightMode, cookieStorageManager, localStorageManager, setScript, storageKey, useColorMode, useColorModeValue };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}